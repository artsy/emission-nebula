# This is documented in the Artsy Blog:
# http://artsy.github.io/blog/2017/07/31/fastlane-travis-weekly-deploys/

require 'cgi'

# Clones Emission and sets it up
lane :setup do
  Dir.chdir("..") do
    sh "rm -rf emission" if Dir.exist? "emission"
    sh "git clone https://github.com/artsy/emission.git"
    Dir.chdir("emission") do
      sh ". ~/.nvm/nvm.sh && nvm use && npm install yarn --global"
      sh "yarn install"
      sh "yarn relay"
      sh "yarn bundle-with-storybooks"
    end

    Dir.chdir("emission/Example") do
      if ENV['ARTSY_API_KEY'] && ENV['ARTSY_API_SECRET'] && ENV['STRIPE_PUBLISHABLE_KEY']
        sh "bundle exec pod keys set ArtsyAPIClientKey $ARTSY_API_KEY"
        sh "bundle exec pod keys set ArtsyAPIClientSecret $ARTSY_API_SECRET"
        sh "bundle exec pod keys set StripePublishableKey $STRIPE_PUBLISHABLE_KEY"
      end
      sh "bundle exec pod repo update"
      # Run `pod install` twice, otherwise pre-patch is not applied and build will fail with CocoaPods-Keys problems.
      sh "bundle exec pod install"
      sh "bundle exec pod install"
    end

    stamp_plist
  end
end

# Lets the CI run a bunch of jobs, and share ENV vars between them
lane :ci_deploy do
  setup_signing
  stamp_plist
  ship
end

# The main job for Fastlane in this repo, you can run this on your computer
# You can run it via `bundle exec fastlane ship`
lane :ship do
  # We were having issues with building an a few folders deep.
  # The /Pods bit is because we can rely on it being there, see
  # this link: https://docs.fastlane.tools/advanced/#directory-behavior
  #
  Dir.chdir("../emission/Example/Pods") do
    disable_automatic_code_signing(
      path: 'Emission.xcodeproj',
      team_id: '23KMWZ572J',
      targets: ['Emission'],
      profile_name: 'match AppStore net.artsy.Emission',
    )
    begin
      gym(workspace: "Emission.xcworkspace",
        configuration: "Deploy",
        scheme: "Emission",
        silent: true # Travis cuts off our logs because they're too long.
        )
      sh "set +e" # Workaround for Travis bug. See https://github.com/travis-ci/travis-ci/issues/6522

      # Right now the second build of the entire CI seems to work,
      # so maybe we can shortcut that by doing it inside the one CI run.
    rescue => exception
      gym(workspace: "Emission.xcworkspace",
      configuration: "Deploy",
      scheme: "Emission")
      sh "set +e" # Workaround for Travis bug. See https://github.com/travis-ci/travis-ci/issues/6522
    end
  end

  # Get the current master changes from the CHANGELOG, filtering out HTML comments, for sending to Testflight
  changelog = "../emission/CHANGELOG.md"
  upcoming_release_notes = CGI.escape_html(File.read(changelog).gsub(/<![^>]*>/, '').split("\n### ")[1])

  # Ship to testflight
  pilot(changelog: upcoming_release_notes,
    itc_provider: 'ArtsyInc',
    distribute_external: true,
    groups: ['Artsy Collaborators'])

  # Log into iTunes connect, get the latest version of the app we shipped, and how many builds we've sent
  client = Spaceship::Tunes.login(ENV["FASTLANE_USERNAME"], ENV["FASTLANE_PASSWORD"])
  client.team_id = "479887"
  app = Spaceship::Tunes::Application.find("net.artsy.Emission")
  latest_version = app.build_trains.versions.sort.last

  # Do a tag, we use a http git remote so we can have push access
  # as the default remote for travis is read-only. This needs to be
  # inside the emission repo, instead of our own.
  Dir.chdir("../emission/Example/") do
    tag = "deploy-#{latest_version}-#{Time.new.strftime("%Y.%m.%d.%H")}"
    add_git_tag(tag: tag)

    if ENV["GITHUB_SUBMODULES_USER"]
      writable_remote = "https://#{ENV['GITHUB_SUBMODULES_USER']}@github.com/artsy/emission.git"
      sh "git remote add http #{writable_remote}"
    else
      sh "git remote add http https://github.com/artsy/emission.git"
    end

    push_git_tags(remote: "http")
  end

  slack message: "There is a new Emission beta available on Testflight.",
        payload: {
          "Version" => latest_version,
          "What's new" => upcoming_release_notes
        },
        default_payloads: []
end

# In case you need to update the signing profiles for this app
lane :update_signing do
  match(type: "appstore")
end

# Used by CI, will not sneakily update (the CI only has read-only access to the repo anyway)
lane :setup_signing do
  setup_travis
  match(type: "appstore")
end

# Minor plist modifications
lane :stamp_plist do
  plist = "emission/Example/Emission/Info.plist"

  # Increment build number to current date
  build_number = Time.new.strftime("%Y.%m.%d.%H")
  `/usr/libexec/PlistBuddy -c "Set CFBundleVersion #{build_number}" "#{plist}"`
end

# Mainly so we don't forget to include these vars in the future
lane :validate_env_vars do
  unless ENV["FASTLANE_USERNAME"] && ENV["FASTLANE_PASSWORD"] && ENV["MATCH_PASSWORD"]
    raise "You need to set FASTLANE_USERNAME, FASTLANE_PASSWORD and MATCH_PASSWORD in your environment"
  end

  unless ENV["SLACK_URL"]
    raise "You need to set SLACK_URL (#{ENV['SLACK_URL']}) in your environment."
  end
end

# If the weekly task fails, then ship a message, a success would also send
error do |_, exception|
  slack(message: "Error Deploying Emission: #{exception}",
        success: false,
        payload: { Output: exception.to_s })
end
