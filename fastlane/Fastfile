# This is documented in the Artsy Blog: XXX

lane :setup do
  Dir.chdir('..') do
    sh 'rm -rf emission' if Dir.exist? 'Emission'
    sh 'git clone https://github.com/artsy/emission.git'
    Dir.chdir('emission') do
      sh 'pod repo update'
      sh 'npm install'
    end

    Dir.chdir('emission/Example') do
      sh 'pod repo update'
      sh 'pod install'
    end
    stamp_plist
  end
end

# The main job for Fastlane in this repo.
lane :ship do
  setup_signing

  #  If deploying manually, use this:
  #
  # gym workspace: 'emission/Example/Emission.xcworkspace',
  #   configuration: 'Deploy',
  #   scheme: 'Emission',
  #   skip_build_archive: true,
  #   archive_path: '/Users/orta/Library/Developer/Xcode/Archives/2017-06-16/Emission 16-06-2017, 10.03.xcarchive'

  gym workspace: 'emission/Example/Emission.xcworkspace',
      configuration: 'Deploy',
      scheme: 'Emission'

  # Get the last 10 lines of the CHANGELOG for Testflight
  changelog = '../emission/CHANGELOG.md'
  upcoming_release_notes = File.read(changelog).split("\n### ").first

  # Ship to testflight
  pilot changelog: upcoming_release_notes

  # Log into iTunes connect, get the latest version of the app we shipped, and how many builds we've sent
  Spaceship::Tunes.login(ENV['FASTLANE_USERNAME'], ENV['FASTLANE_PASSWORD'])
  app = Spaceship::Tunes::Application.find('net.artsy.Emission')
  latest_version = app.build_trains.keys.sort.last
  train = app.build_trains[latest_version]
  build_version = train.builds.count + 1

  # Do a tag, we use a http git remote so we can have push access
  # as the default remote for travis is read-only
  tag = "deploy-#{latest_version}-#{build_version}"
  `git tag -d '#{tag}'`

  # Tag releases
  add_git_tag tag: tag
  sh "git remote add http https://#{ENV['GITHUB_SUBMODULES_USER']}@github.com/artsy/emission.git"
  sh "git push http #{tag}"

  slack message: 'There is a new Emission beta available on Testflight.',
        payload: {
          'Version' => latest_version,
          "What's new" => upcoming_release_notes
        },
        default_payloads: []
end

# In case you need to update the signing profiles for this app
lane :update_signing do
  match(type: 'appstore')
end

# Used by CI, will not sneakily update (the CI only has read-only access to the repo anyway)
lane :setup_signing do
  create_keychain(
    name: ENV['MATCH_KEYCHAIN_NAME'],
    password: ENV['MATCH_PASSWORD'],
    default_keychain: true,
    unlock: true,
    timeout: 3600,
    add_to_search_list: true
  )

  match(type: 'appstore',
        keychain_name: ENV['MATCH_KEYCHAIN_NAME'],
        keychain_password: ENV['MATCH_PASSWORD'],
        readonly: true)
end

# Minor plist modifications
lane :stamp_plist do
  plist = 'emission/Example/Emission/Info.plist'

  # Increment build number to current date
  build_number = Time.new.strftime('%Y.%m.%d.%H')
  `/usr/libexec/PlistBuddy -c "Set CFBundleVersion #{build_number}" "#{plist}"`
end

lane :validate_env_vars do
  unless ENV['FASTLANE_USERNAME'] && ENV['FASTLANE_PASSWORD'] && ENV['MATCH_PASSWORD']
    raise 'You need to set FASTLANE_USERNAME, FASTLANE_PASSWORD and MATCH_PASSWORD in your environment'
  end

  unless ENV['GITHUB_SUBMODULES_USER']
    raise 'You need to set GITHUB_SUBMODULES_USER in your environment'
  end

  unless ENV['SLACK_URL']
    raise "You need to set SLACK_URL (#{ENV['SLACK_URL']}) in your environment."
  end
end

# If the weekly task fails, then ship a message
error do |_, exception|
  # slack message: "Error Deploying Emission: #{exception}",
  #       success: false,
  #       payload: { Output: exception.error_info.to_s }
end
